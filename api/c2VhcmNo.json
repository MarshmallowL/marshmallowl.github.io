[{"title":"SQL执行计划","date":"2020-12-10T14:07:31.000Z","date_formatted":{"ll":"Dec 10, 2020","L":"12/10/2020","MM-DD":"12-10"},"updated":"2021-03-29T14:29:08.175Z","content":"解释计划\nTODO\n执行计划\n当一条SQL语句执行时会生成该语句的实际执行计划，在语句被硬解析后，所选执行计划会被存到库高速缓存方便下次使用。\n查看最近生成的SQL语句\n12345678-- SCOTT替换成实际用户名SELECT /* recentsql */ sql_id,child_number,hash_value,address,executions,sql_textFROM v$sqlWHERE parsing_user_id = (        SELECT user_id FROM all_users        WHERE username = &#x27;SCOTT&#x27;)    AND command_type IN (2,3,6,7,189)    AND upper(sql_text) NOT LIKE upper(&#x27;%recentsql%&#x27;);\n查看相关执行计划\n在sqlplus下查看\n123456-- sql加上/*+ gather_plan_statistics */注释select /*+ gather_plan_statistics */ empno,ename from emp where ename = &#x27;KING&#x27;;-- 关闭SERVEROUTPUTset serveroutput off-- 查看执行计划select * from table(dbms_xplan.display_cursor(null,null,&#x27;ALLSTATS LAST&#x27;));\n结果如下表：\n\n\nId\nOperation\nName\nStarts\nE-Rows\nA-Rows\nA-Time\nBuffers\nReads\n\n\n\n\n0\nSELECT STATEMENT\n\n1\n\n1\n00:00:00.01\n8\n6\n\n\n1\nTABLE ACCESS FULL\nEMP\n1\n1\n1\n00:00:00.01\n8\n6\n\n\n各个表头的含义：\n\nA-Rows:返回多少行\nBuffers:发生了多少次一致性读取\nReads:发生了多少次物理读取\nStarts:每一步骤执行的次数\n\n标识SQL语句以便后续取回计划\n\n通过注释标识SQL\n\n1SELECT /* KM-EMPTEST */ /*+ gather_plan_statistics */ empno,ename FROM emp WHERE job = &#x27;MANAGER&#x27;;\n\n使用如下脚本为任何SQL语句取出执行计划\n\n123456789101112131415SELECT    xplan.*FROM    (        SELECT            MAX(sql_id) KEEP(DENSE_RANK LAST ORDER BY last_active_time) sql_id,            MAX(child_number) KEEP(DENSE_RANK LAST ORDER BY last_active_time) child_number        FROM            v$sql        WHERE            upper(sql_text) LIKE &#x27;%&amp;1%&#x27;            AND upper(sql_text) NOT LIKE &#x27;%FROM V$SQL WHERE UPPER(SQL_TEXT) LIKE%&#x27;    ) sqlinfo,    TABLE ( dbms_xplan.display_cursor(sqlinfo.sql_id, sqlinfo.child_number, &#x27;ALLSTATS LAST&#x27;) ) xplan/\n","plink":"https://marshmallowl.github.io/2020/12/10/SQL执行计划/"},{"title":"rsync同步备份","date":"2020-03-26T08:02:06.000Z","date_formatted":{"ll":"Mar 26, 2020","L":"03/26/2020","MM-DD":"03-26"},"updated":"2021-03-29T14:25:07.890Z","content":"文章来源\n\nrsync文件同步详解\nlinux配置rsync服务端\n\nrsync简介\n\nrsync是linux系统下的数据镜像备份工具。使用快速增量备份工具Remote Sync可以远程同步，支持本地复制，或者与其他SSH、rsync主机同步。\n\n安装rsync(centos默认安装了)\n123yum -y install rsync#查看版本rsync --version\n环境说明\n\n\nPC1: ==rsync服务端==，需要被备份的服务器，IP:192.168.80.14, 备份目录 /common\n\n\nPC2: ==rsync客户端==，备份服务器，用于存放备份文件（目录为/test），IP:192.168.80.15\n\n\n配置\n\n首先登录PC1，编辑配置文件 vim /etc/rsyncd.conf, 配置文件如下\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344#设置服务器信息提示文件，在该文件中编写提示信息motd file = /etc/rsyncd.motd#开启rsync数据传输日志功能transfer logging = yes#设置日志文件名，可通过log format参数设置日志格式log file = /var/log/rsyncd.log#设置rsync进程号保存文件名称pid file = /var/run/rsyncd.log#设置锁文件名称lock file = /var/run/rsync.lock#设置服务器监听的端口号，默认是873port = 873#设置本服务器所监听网卡接口的ip地址address = 192.168.80.14#设置进行数据传输时所使用的帐户名或ID号,默认nobodyuid = nobody#设置进行数据传输时所使用的组名或GID号,默认nobodygid = nobody#若为yes, rsync会首先进行chroot设置，将根映射在下面的path参数路径下，对客户端而言，系统的根就是path参数指定的路径。但这样做需要root权限，并且在同步符号连接资料时只会同步名称，不会同步内容。use chroot = no#是否允许客户端上传数据，yes表示不允许read only = yes#设置并发连接数，0表示无限制max connections = 10#自定义模块名，rsync通过模块定义同步的目录，可定义多个[common]#定义注释说明字串comment = backup ftp#同步目录的真实路径通过path指定，该路径是指服务端需要备份的路径path = /common #忽略一些IO错误ignore errors#exclude = test/    #exclude指定common目录下某个目录可以不同步数据#设置允许连接服务器的账户，此账户可以是系统中不存在的用户auth users = tom,jerry#密码验证文件名，该文件权限要求为只读，建议为600，仅在设置auth users后有效secrets file = /etc/rsyncd.secrets#设置哪些主机可以同步数据，多ip和网段之间使用空格分隔hosts allow = 192.168.80.0/255.255.255.0#除了hosts allow定义的主机外，拒绝其他所有hosts deny = * #客户端请求显示模块列表时，本模块名称是否显示，默认为truelist = false\n\n创建密码文件，PC1和PC2都需要操作\n\n==注意！客户端只需写入密码即可！！==\n1234567echo &quot;tom:123&quot; &gt; /etc/rsyncd.secretsecho &quot;jerry:123&quot; &gt;&gt; /etc/rsyncd.secretschmod 600 /etc/rsyncd.secretsecho &quot;welcome to access&quot; &gt; /etc/rsyncd.motd  #此项客户端不需要做rsync --daemon    # --daemon表示后台执行，客户端开启rsync不需要--daemon选项echo &quot;/usr/bin/rsync --daemon&quot; &gt;&gt; /etc/rc.local    #开机启动rsync服务firewall-cmd --permanent --add-port=873/tcp    #添加防火墙规则，允许873端口的数据访问\n\n查看rsync和se-linux相关的设置（==服务端设置==）\n\n123getsebool -a | grep rsync#如果rsync_export_all_ro是off,将其修改为onsetsebool -P rsync_export_all_ro on\n\nrsync语法格式（==客户端执行==）\n\n1234567891011121314rsync -vzrtopg --progress tom@192.168.80.14::common /test     #通common模块指定的/common目录下的文件拷贝到本客户端的/test目录#参数说明v:显示详细信息z：传输过程中对数据进行压缩r：递归t：保留修改时间属性o：保留文件所有者属性p：保留文件权限属性g：保留文件所属组属性a：归档模式，主要保留文件属性，等同于-rlptgoD--progress：显示数据传输的进度信息--password-file=FILE：指定密码文件，将密码写入文件，实现非交互式数据同步，这个文件名也需要修改权限为600--delete：删除那些仅在目标路径中存在的文件（源路径中不存在），在脚本中的数据同步经常加上此参数--list-only：仅列出服务器模块列表，需要rsync服务器设置list=true\n\nshell脚本（==客户端执行==）\n\ntouch /backup-ftp.sh  新建脚本\n123456789101112#!/bin/bashexport PATH=/bin:/usr/bin:/usr/local/binSRC=commonDEST=/test/server=192.168.80.14user=tompassfile=/etc/rsyncd.secrets#if the DEST directory not found, then create one[ ! -d $DEST ] &amp;&amp; mkdir $DEST[ ! -e $passfile ] &amp;&amp; exit 2rsync -az --delete --password-file=$passfile $&#123;user&#125;@$&#123;server&#125;::$SRC $DEST\n\n加入定时任务\n\n1234#进入定时任务crontab -e #每隔6小时备份一次* */6 * * * sh /backup-ftp.sh\n以上为rsync备份基本流程，包括踩的一些坑，待有其他坑再补上\n","plink":"https://marshmallowl.github.io/2020/03/26/rsync同步文件夹/"},{"title":"about","date":"2020-11-24T14:23:40.000Z","date_formatted":{"ll":"Nov 24, 2020","L":"11/24/2020","MM-DD":"11-24"},"updated":"2020-11-27T12:37:07.053Z","content":"记录生活，记录成长~\n","plink":"https://marshmallowl.github.io/about/"}]